# Relevant Files
INSTRUCTIONS:
The following files are considered important for the current task.

Use them for:
  - Understanding task context
  - Examples of how to structure your solutions



## File: /app/lib/aircana/cli/commands/add_files.rb
```
# frozen_string_literal: true

require_relative "../shell_command"
require_relative "../../contexts/relevant_files"

module Aircana
  module CLI
    module AddFiles
      class << self
        def run
          selected_files = ShellCommand.run("fzf -m")

          selected_files = selected_files.split("\n").map(&:strip).reject(&:empty?)

          if selected_files.empty?
            Aircana.logger.info "No files selected. Exiting."
            return
          end

          # For now remove all files from the relevant files context, but consider
          # making this a more explicit action
          Contexts::RelevantFiles.remove_all
          Contexts::RelevantFiles.add(selected_files)
        end
      end
    end
  end
end

```

## File: /app/relevant_files/relevant_files_command.md
```
# Relevant Files
INSTRUCTIONS :
The following files are considered important for the current task.

Use them for:
  - Understanding task context
  - Examples of how to structure your solutions



## File: /app/lib/aircana/cli/commands/add_files.rb
```
# frozen_string_literal: true

require_relative "../shell_command"
require_relative "../../contexts/relevant_files"

module Aircana
  module CLI
    module AddFiles
      class << self
        def run
          selected_files = ShellCommand.run("fzf -m")

          selected_files = selected_files.split("\n").map(&:strip).reject(&:empty?)

          if selected_files.empty?
            Aircana.logger.info "No files selected. Exiting."
            return
          end

          # For now remove all files from the relevant files context, but consider
          # making this a more explicit action
          Contexts::RelevantFiles.remove_all
          Contexts::RelevantFiles.add(selected_files)
        end
      end
    end
  end
end

```

## File: /app/relevant_files/relevant_files_command.md
```
# Relevant Files

INSTRUCTIONS :
The following files are considered important for the current task.

Use them for:
  - Understanding task context
  - Examples of how to structure your solutions




## File: /app/lib/aircana/cli/commands/add_files.rb

```
# frozen_string_literal: true

require_relative "../shell_command"
require_relative "../../contexts/relevant_files"

module Aircana
  module CLI
    module AddFiles
      class << self
        def run
          selected_files = ShellCommand.run("fzf -m")

          selected_files = selected_files.split("\n").map(&:strip).reject(&:empty?)

          if selected_files.empty?
            Aircana.logger.info "No files selected. Exiting."
            return
          end

          # For now remove all files from the relevant files context, but consider
          # making this a more explicit action
          Contexts::RelevantFiles.remove_all
          Contexts::RelevantFiles.add(selected_files)
        end
      end
    end
  end
end

```
---

## File: /app/relevant_files/relevant_files_command.md

```
The following files are relevant to the current task.

Use them as referneces for understanding and as patterns to follow.


# File: /app/lib/aircana/cli/commands/add_files.rb

# frozen_string_literal: true

require_relative "../shell_command"
require_relative "../../contexts/relevant_files"

module Aircana
  module CLI
    module AddFiles
      class << self
        def run
          selected_files = ShellCommand.run("fzf -m")

          selected_files = selected_files.split("\n").map(&:strip).reject(&:empty?)

          if selected_files.empty?
            Aircana.logger.info "No files selected. Exiting."
            return
          end

          # For now remove all files from the relevant files context, but consider
          # making this a more explicit action
          Contexts::RelevantFiles.remove_all
          Contexts::RelevantFiles.add(selected_files)
        end
      end
    end
  end
end

---

# File: /app/lib/aircana/generators/relevant_files_command_generator.rb

# frozen_string_literal: true

require_relative "../generators"

module Aircana
  module Generators
    class RelevantFilesCommandGenerator < BaseGenerator
      def initialize(file_in: nil, file_out: nil)
        super(
          file_in: file_in || default_template_path,
          file_out: file_out || default_output_path
        )
      end

      protected

      def locals
        super.merge({ relevant_project_files_dir: })
      end

      private

      def default_template_path
        File.join(File.dirname(__FILE__), "..", "templates", "commands", "add_relevant_files.erb")
      end

      def default_output_path
        File.join(Aircana.configuration.output_dir, "commands", "relevant_files_command.md")
      end

      def relevant_project_files_dir
        Aircana.configuration.relevant_project_files_dir
      end
    end
  end
end

---

# File: /app/lib/aircana/templates/relevant_files_verbose_results.erb

The following files are relevant to the current task.

Use them as referneces for understanding and as patterns to follow.

<% relevant_files.each do |file_path| %>
# File: <%= File.realpath(file_path) %>

<%= File.read(file_path) %>
---
<% end %>

---

# File: /app/lib/aircana/generators/relevant_files_verbose_results_generator.rb

# frozen_string_literal: true

require_relative "../generators"

module Aircana
  module Generators
    class RelevantFilesVerboseResultsGenerator < BaseGenerator
      def initialize(file_in: nil, file_out: nil)
        super(
          file_in: file_in || default_template_path,
          file_out: file_out || default_output_path
        )
      end

      private

      def locals
        super.merge({ relevant_files: })
      end

      def relevant_files
        Dir.glob("#{Aircana.configuration.relevant_project_files_dir}/*")
      end

      def default_template_path
        File.join(File.dirname(__FILE__), "..", "templates", "relevant_files_verbose_results.erb")
      end

      def default_output_path
        File.join(Aircana.configuration.relevant_project_files_dir, "relevant_files_command.md")
      end
    end
  end
end

---


```
---

## File: /app/lib/aircana/generators/relevant_files_command_generator.rb

```
# frozen_string_literal: true

require_relative "../generators"

module Aircana
  module Generators
    class RelevantFilesCommandGenerator < BaseGenerator
      def initialize(file_in: nil, file_out: nil)
        super(
          file_in: file_in || default_template_path,
          file_out: file_out || default_output_path
        )
      end

      protected

      def locals
        super.merge({ relevant_project_files_dir: })
      end

      private

      def default_template_path
        File.join(File.dirname(__FILE__), "..", "templates", "commands", "add_relevant_files.erb")
      end

      def default_output_path
        File.join(Aircana.configuration.output_dir, "commands", "relevant_files_command.md")
      end

      def relevant_project_files_dir
        Aircana.configuration.relevant_project_files_dir
      end
    end
  end
end

```
---

## File: /app/lib/aircana/templates/relevant_files_verbose_results.erb

```
# Relevant Files

<%=
    helpers.model_instructions(
        <<~INSTRUCTIONS
          The following files are considered important for the current task.

          Use them for:
            - Understanding task context
            - Examples of how to structure your solutions
        INSTRUCTIONS
    )
%>

<% relevant_files.each do |file_path| %>
## File: <%= File.realpath(file_path) %>

```
<%= File.read(file_path) %>
```
---
<% end %>

```
---

## File: /app/lib/aircana/generators/relevant_files_verbose_results_generator.rb

```
# frozen_string_literal: true

require_relative "../generators"

module Aircana
  module Generators
    class RelevantFilesVerboseResultsGenerator < BaseGenerator
      def initialize(file_in: nil, file_out: nil)
        super(
          file_in: file_in || default_template_path,
          file_out: file_out || default_output_path
        )
      end

      private

      def locals
        super.merge({ relevant_files: })
      end

      def relevant_files
        Dir.glob("#{Aircana.configuration.relevant_project_files_dir}/*")
      end

      def default_template_path
        File.join(File.dirname(__FILE__), "..", "templates", "relevant_files_verbose_results.erb")
      end

      def default_output_path
        File.join(Aircana.configuration.relevant_project_files_dir, "relevant_files_command.md")
      end
    end
  end
end

```
---


```

## File: /app/lib/aircana/generators/relevant_files_command_generator.rb
```
# frozen_string_literal: true

require_relative "../generators"

module Aircana
  module Generators
    class RelevantFilesCommandGenerator < BaseGenerator
      def initialize(file_in: nil, file_out: nil)
        super(
          file_in: file_in || default_template_path,
          file_out: file_out || default_output_path
        )
      end

      protected

      def locals
        super.merge({ relevant_project_files_dir: })
      end

      private

      def default_template_path
        File.join(File.dirname(__FILE__), "..", "templates", "commands", "add_relevant_files.erb")
      end

      def default_output_path
        File.join(Aircana.configuration.output_dir, "commands", "relevant_files_command.md")
      end

      def relevant_project_files_dir
        Aircana.configuration.relevant_project_files_dir
      end
    end
  end
end

```

## File: /app/lib/aircana/templates/relevant_files_verbose_results.erb
```
# Relevant Files
<%=
    helpers.model_instructions(
        <<~INSTRUCTIONS
          The following files are considered important for the current task.

          Use them for:
            - Understanding task context
            - Examples of how to structure your solutions
        INSTRUCTIONS
    )
%>
<% relevant_files.each do |file_path| %>
## File: <%= File.realpath(file_path) %>
```
<%= File.read(file_path) %>
```
<% end %>

```

## File: /app/lib/aircana/generators/relevant_files_verbose_results_generator.rb
```
# frozen_string_literal: true

require_relative "../generators"

module Aircana
  module Generators
    class RelevantFilesVerboseResultsGenerator < BaseGenerator
      def initialize(file_in: nil, file_out: nil)
        super(
          file_in: file_in || default_template_path,
          file_out: file_out || default_output_path
        )
      end

      private

      def locals
        super.merge({ relevant_files: })
      end

      def relevant_files
        Dir.glob("#{Aircana.configuration.relevant_project_files_dir}/*")
      end

      def default_template_path
        File.join(File.dirname(__FILE__), "..", "templates", "relevant_files_verbose_results.erb")
      end

      def default_output_path
        File.join(Aircana.configuration.relevant_project_files_dir, "relevant_files_command.md")
      end
    end
  end
end

```


```

## File: /app/lib/aircana/generators/relevant_files_command_generator.rb
```
# frozen_string_literal: true

require_relative "../generators"

module Aircana
  module Generators
    class RelevantFilesCommandGenerator < BaseGenerator
      def initialize(file_in: nil, file_out: nil)
        super(
          file_in: file_in || default_template_path,
          file_out: file_out || default_output_path
        )
      end

      protected

      def locals
        super.merge({ relevant_project_files_dir: })
      end

      private

      def default_template_path
        File.join(File.dirname(__FILE__), "..", "templates", "commands", "add_relevant_files.erb")
      end

      def default_output_path
        File.join(Aircana.configuration.output_dir, "commands", "relevant_files_command.md")
      end

      def relevant_project_files_dir
        Aircana.configuration.relevant_project_files_dir
      end
    end
  end
end

```

## File: /app/lib/aircana/templates/relevant_files_verbose_results.erb
```
# Relevant Files
<%=
    helpers.model_instructions(
        <<~INSTRUCTIONS
          The following files are considered important for the current task.

          Use them for:
            - Understanding task context
            - Examples of how to structure your solutions
        INSTRUCTIONS
    )
%>
<% relevant_files.each do |file_path| %>
## File: <%= File.realpath(file_path) %>
```
<%= File.read(file_path) %>
```
<% end %>

```

## File: /app/lib/aircana/generators/relevant_files_verbose_results_generator.rb
```
# frozen_string_literal: true

require_relative "../generators"

module Aircana
  module Generators
    class RelevantFilesVerboseResultsGenerator < BaseGenerator
      def initialize(file_in: nil, file_out: nil)
        super(
          file_in: file_in || default_template_path,
          file_out: file_out || default_output_path
        )
      end

      private

      def locals
        super.merge({ relevant_files: })
      end

      def relevant_files
        Dir.glob("#{Aircana.configuration.relevant_project_files_dir}/*")
      end

      def default_template_path
        File.join(File.dirname(__FILE__), "..", "templates", "relevant_files_verbose_results.erb")
      end

      def default_output_path
        File.join(Aircana.configuration.relevant_project_files_dir, "relevant_files_command.md")
      end
    end
  end
end

```

