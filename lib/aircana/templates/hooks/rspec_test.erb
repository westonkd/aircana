#!/bin/bash
# RSpec test hook generated by Aircana
# This hook runs relevant tests when Ruby files are modified

# Get the tool details
TOOL_NAME="$1"
TOOL_PARAMS="$2"

# Only act on file modification tools
case "$TOOL_NAME" in
  "Edit"|"Write"|"MultiEdit")
    ;;
  *)
    exit 0
    ;;
esac

# Check if this is a Ruby project with RSpec
if [ ! -f "Gemfile" ] || ! grep -q "rspec" Gemfile 2>/dev/null; then
  exit 0
fi

# Extract file path from tool parameters (basic extraction)
MODIFIED_FILE=$(echo "$TOOL_PARAMS" | grep -o '"[^"]*\.rb"' | head -1 | tr -d '"')

if [ -z "$MODIFIED_FILE" ]; then
  exit 0
fi

# Determine which specs to run based on the modified file
SPEC_FILE=""

# Check for corresponding spec file
if echo "$MODIFIED_FILE" | grep -q "^lib/"; then
  # For lib files, look for spec file
  SPEC_FILE="spec/$(echo "$MODIFIED_FILE" | sed 's|^lib/||' | sed 's|\.rb$|_spec.rb|')"
elif echo "$MODIFIED_FILE" | grep -q "^app/"; then
  # For Rails app files
  SPEC_FILE="spec/$(echo "$MODIFIED_FILE" | sed 's|^app/||' | sed 's|\.rb$|_spec.rb|')"
elif echo "$MODIFIED_FILE" | grep -q "_spec\.rb$"; then
  # If the modified file is already a spec file
  SPEC_FILE="$MODIFIED_FILE"
fi

# Check if spec file exists
if [ -n "$SPEC_FILE" ] && [ -f "$SPEC_FILE" ]; then
  echo "Running tests for modified file: $MODIFIED_FILE"

  # Run the specific test
  if command -v bundle >/dev/null 2>&1; then
    bundle exec rspec "$SPEC_FILE" --format progress
  else
    rspec "$SPEC_FILE" --format progress
  fi

  RSPEC_EXIT_CODE=$?

  if [ $RSPEC_EXIT_CODE -ne 0 ]; then
    cat << EOF
{
  "type": "advanced",
  "decision": "allow",
  "message": "Tests failed for $SPEC_FILE. Consider fixing the failing tests.\n\nYou can run: bundle exec rspec $SPEC_FILE"
}
EOF
  else
    echo "Tests passed for $SPEC_FILE"
  fi
fi

# Always allow the modification to proceed
exit 0