#!/bin/bash
# Session start hook generated by Aircana
# This hook runs when a new Claude Code session starts

# Create log directory if it doesn't exist
mkdir -p ~/.aircana

# Log session start
echo "$(date): New Claude Code session started in $(pwd)" >> ~/.aircana/hooks.log

# Initialize session-specific context
SESSION_ID=$(date +%s)
echo "$SESSION_ID" > ~/.aircana/current_session

# Check project status and add context
CONTEXT_ADDITIONS=""

# Detect project type
if [ -f "package.json" ]; then
  CONTEXT_ADDITIONS="${CONTEXT_ADDITIONS}Project Type: Node.js/JavaScript project detected.\n"
elif [ -f "Gemfile" ]; then
  CONTEXT_ADDITIONS="${CONTEXT_ADDITIONS}Project Type: Ruby project detected.\n"
elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
  CONTEXT_ADDITIONS="${CONTEXT_ADDITIONS}Project Type: Python project detected.\n"
fi

# Check for Aircana configuration
if [ -f ".aircana/config.yml" ]; then
  CONTEXT_ADDITIONS="${CONTEXT_ADDITIONS}Aircana: Project has Aircana configuration.\n"
fi

# Check git status
if [ -d ".git" ]; then
  BRANCH=$(git branch --show-current 2>/dev/null || echo "unknown")
  CONTEXT_ADDITIONS="${CONTEXT_ADDITIONS}Git: Current branch is '$BRANCH'.\n"

  # Check for uncommitted changes
  if ! git diff-index --quiet HEAD 2>/dev/null; then
    CONTEXT_ADDITIONS="${CONTEXT_ADDITIONS}Git: Uncommitted changes detected.\n"
  fi
fi

# Output context if we have any
if [ -n "$CONTEXT_ADDITIONS" ]; then
  # Escape context for JSON and remove trailing newline
  ESCAPED_CONTEXT=$(echo -n "$CONTEXT_ADDITIONS" | sed 's/"/\\"/g' | tr '\n' ' ' | sed 's/  */ /g')
  cat << EOF
{
  "hookSpecificOutput": {
    "hookEventName": "SessionStart",
    "additionalContext": "$ESCAPED_CONTEXT"
  }
}
EOF
else
  # No context to add, just allow session to continue
  echo "{}"
fi