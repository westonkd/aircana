#!/bin/bash
# Multi-root project support hook for Aircana
# This hook runs when a new Claude Code session starts

PROJECT_JSON=".aircana/project.json"
CLAUDE_AGENTS_DIR=".claude/agents"
AIRCANA_AGENTS_DIR=".aircana/agents"

# Create log directory if it doesn't exist
mkdir -p ~/.aircana

# Log session start
echo "$(date): New Claude Code session started in $(pwd)" >> ~/.aircana/hooks.log

# Check if jq is available
if ! command -v jq &> /dev/null; then
    echo "$(date): Warning - jq not found. Multi-root support disabled." >> ~/.aircana/hooks.log
    echo "{}"
    exit 0
fi

# Check if project.json exists
if [ ! -f "$PROJECT_JSON" ]; then
    echo "$(date): No project.json found, skipping multi-root setup" >> ~/.aircana/hooks.log
    echo "{}"
    exit 0
fi

echo "$(date): Processing multi-root configuration from $PROJECT_JSON" >> ~/.aircana/hooks.log

# Ensure directories exist
mkdir -p "$CLAUDE_AGENTS_DIR" 2>/dev/null
mkdir -p "$AIRCANA_AGENTS_DIR" 2>/dev/null

# Clean up existing symlinks (only remove symlinks, not real files)
find "$CLAUDE_AGENTS_DIR" -type l -delete 2>/dev/null
find "$AIRCANA_AGENTS_DIR" -type l -delete 2>/dev/null

# Parse folders from project.json
FOLDERS=$(jq -r '.folders[]?.path // empty' "$PROJECT_JSON" 2>/dev/null)

if [ -z "$FOLDERS" ]; then
    echo "$(date): No folders configured in project.json" >> ~/.aircana/hooks.log
    echo "{}"
    exit 0
fi

# Track what we've linked for reporting
LINKED_AGENTS=0
LINKED_KNOWLEDGE=0

# Create symlinks for each configured folder
for folder in $FOLDERS; do
    # Validate folder exists
    if [ ! -d "$folder" ]; then
        echo "$(date): Warning - folder '$folder' not found, skipping" >> ~/.aircana/hooks.log
        continue
    fi

    echo "$(date): Processing folder: $folder" >> ~/.aircana/hooks.log

    # Get folder name for prefix (replace slashes with underscores for nested paths)
    PREFIX=$(echo "$folder" | tr '/' '_')

    # Link agents from sub-folder .claude/agents
    if [ -d "$folder/.claude/agents" ]; then
        for agent_file in "$folder/.claude/agents"/*.md; do
            if [ ! -f "$agent_file" ]; then
                continue
            fi

            AGENT_NAME=$(basename "$agent_file" .md)
            LINK_NAME="${PREFIX}_${AGENT_NAME}.md"
            TARGET_PATH="$CLAUDE_AGENTS_DIR/$LINK_NAME"

            # Create relative path from .claude/agents to the agent file
            RELATIVE_PATH=$(realpath --relative-to="$CLAUDE_AGENTS_DIR" "$agent_file" 2>/dev/null)

            if [ -n "$RELATIVE_PATH" ]; then
                ln -sf "$RELATIVE_PATH" "$TARGET_PATH"
                echo "$(date): Linked agent: $LINK_NAME -> $RELATIVE_PATH" >> ~/.aircana/hooks.log
                ((LINKED_AGENTS++))
            fi
        done
    fi

    # Link knowledge from sub-folder .aircana/agents
    if [ -d "$folder/.aircana/agents" ]; then
        for agent_dir in "$folder/.aircana/agents"/*; do
            if [ ! -d "$agent_dir" ]; then
                continue
            fi

            AGENT_NAME=$(basename "$agent_dir")
            LINK_NAME="${PREFIX}_${AGENT_NAME}"
            TARGET_PATH="$AIRCANA_AGENTS_DIR/$LINK_NAME"

            # Create relative path from .aircana/agents to the knowledge directory
            RELATIVE_PATH=$(realpath --relative-to="$AIRCANA_AGENTS_DIR" "$agent_dir" 2>/dev/null)

            if [ -n "$RELATIVE_PATH" ]; then
                ln -sf "$RELATIVE_PATH" "$TARGET_PATH"
                echo "$(date): Linked knowledge: $LINK_NAME -> $RELATIVE_PATH" >> ~/.aircana/hooks.log
                ((LINKED_KNOWLEDGE++))
            fi
        done
    fi
done

# Report results
echo "$(date): Multi-root setup complete - linked $LINKED_AGENTS agents and $LINKED_KNOWLEDGE knowledge bases" >> ~/.aircana/hooks.log

# Return success with optional context
if [ $LINKED_AGENTS -gt 0 ] || [ $LINKED_KNOWLEDGE -gt 0 ]; then
    CONTEXT="Multi-root: Linked $LINKED_AGENTS agents and $LINKED_KNOWLEDGE knowledge bases from configured folders."
    ESCAPED_CONTEXT=$(echo -n "$CONTEXT" | sed 's/"/\\"/g')
    cat << EOF
{
  "hookSpecificOutput": {
    "hookEventName": "SessionStart",
    "additionalContext": "$ESCAPED_CONTEXT"
  }
}
EOF
else
    echo "{}"
fi